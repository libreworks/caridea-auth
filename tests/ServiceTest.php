<?php
/**
 * Caridea
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not
 * use this file except in compliance with the License. You may obtain a copy of
 * the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under
 * the License.
 *
 * @copyright 2015 LibreWorks contributors
 * @license   http://opensource.org/licenses/Apache-2.0 Apache 2.0 License
 */
namespace Caridea\Auth;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2015-06-01 at 18:44:38.
 */
class ServiceTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @covers Caridea\Auth\Service::__construct
     * @covers Caridea\Auth\Service::getPrincipal
     * @covers Caridea\Auth\Service::resume
     */
    public function testGetPrincipal()
    {
        $session = $this->getMockBuilder('\\Caridea\\Session\\Session')
            ->setMethods(['getValues'])
            ->getMockForAbstractClass();
        $session->expects($this->any())
            ->method('getValues')
            ->willReturnCallback(function ($namespace) use ($session) {
                return new \Caridea\Session\Values($session, $namespace);
            });
        $object = new Service($session);
        $this->assertSame(Principal::getAnonymous(), $object->getPrincipal());
        $session->getValues(Service::class)->offsetSet('principal', Principal::get('foobar', []));
    }
    
    /**
     * @covers Caridea\Auth\Service::__construct
     * @covers Caridea\Auth\Service::getPrincipal
     * @covers Caridea\Auth\Service::resume
     */
    public function testGetPrincipal2()
    {
        $session = $this->getMockBuilder('Caridea\\Session\\Session')
            ->setMethods(['getValues'])
            ->getMockForAbstractClass();
        $session->expects($this->any())
            ->method('getValues')
            ->willReturnCallback(function ($namespace) use ($session) {
                return new \Caridea\Session\Values($session, $namespace);
            });
        $object = new Service($session);
        $principal = Principal::get('foobar', []);
        $session->getValues(Service::class)->offsetSet('principal', $principal);
        $this->assertSame($principal, $object->getPrincipal());
    }

    /**
     * @covers Caridea\Auth\Service::login
     * @covers Caridea\Auth\Service::publishLogin
     */
    public function testLogin()
    {
        $session = $this->getMockBuilder('\\Caridea\\Session\\Session')
            ->setMethods(['start', 'getValues'])
            ->getMockForAbstractClass();
        $session->expects($this->any())
            ->method('start')
            ->willReturn(true);
        $session->expects($this->any())
            ->method('getValues')
            ->willReturnCallback(function ($namespace) use ($session) {
                return new \Caridea\Session\Values($session, $namespace);
            });
        
        $principal = Principal::get('foobar', []);
            
        $adapter = $this->getMockBuilder(Adapter::class)
            ->setMethods(['login'])
            ->getMockForAbstractClass();
        $adapter->expects($this->any())
            ->method('login')
            ->willReturn($principal);
        
        $request = $this->getMockForAbstractClass(\Psr\Http\Message\ServerRequestInterface::class);
        
        $object = new Service($session);
        
        $this->assertTrue($object->login($request, $adapter));
        $values = $session->getValues(Service::class);
        $this->assertEquals($principal, $values->get('principal'));
        $this->assertNotNull($values->get('firstActive'));
        $this->assertNotNull($values->get('lastActive'));
    }

    /**
     * @covers Caridea\Auth\Service::login
     * @covers Caridea\Auth\Service::publishLogin
     */
    public function testLoginWithPublisher()
    {
        $session = $this->getMockBuilder('\\Caridea\\Session\\Session')
            ->setMethods(['start', 'getValues'])
            ->getMockForAbstractClass();
        $session->expects($this->any())
            ->method('start')
            ->willReturn(true);
        $session->expects($this->any())
            ->method('getValues')
            ->willReturnCallback(function ($namespace) use ($session) {
                return new \Caridea\Session\Values($session, $namespace);
            });
        
        $publisher = $this->getMockBuilder(\Caridea\Event\Publisher::class)
            ->setMethods(['publish'])
            ->getMockForAbstractClass();
        $publisher->expects($this->once())
            ->method('publish');
            
        $principal = Principal::get('foobar', []);
            
        $adapter = $this->getMockBuilder(Adapter::class)
            ->setMethods(['login'])
            ->getMockForAbstractClass();
        $adapter->expects($this->any())
            ->method('login')
            ->willReturn($principal);
        
        $request = $this->getMockForAbstractClass(\Psr\Http\Message\ServerRequestInterface::class);
        
        $object = new Service($session, $publisher);
        
        $this->assertTrue($object->login($request, $adapter));
        $values = $session->getValues(Service::class);
        $this->assertEquals($principal, $values->get('principal'));
        $this->assertNotNull($values->get('firstActive'));
        $this->assertNotNull($values->get('lastActive'));
        
        $this->verifyMockObjects();
    }
    
    /**
     * @covers Caridea\Auth\Service::__construct
     * @covers Caridea\Auth\Service::login
     */
    public function testNoSession()
    {
        $session = $this->getMockForAbstractClass('\\Caridea\\Session\\Session');
        $object = new Service($session);
        $request = $this->getMockForAbstractClass(\Psr\Http\Message\ServerRequestInterface::class);
        $this->assertFalse($object->login($request));
    }
    
    /**
     * @covers Caridea\Auth\Service::__construct
     * @covers Caridea\Auth\Service::login
     * @expectedException \InvalidArgumentException
     * @expectedExceptionMessage You must specify an adapter for authentication
     */
    public function testNullAdapter()
    {
        $session = $this->getMockBuilder('\\Caridea\\Session\\Session')
            ->setMethods(['resume'])
            ->getMockForAbstractClass();
        $session->expects($this->any())
            ->method('resume')
            ->willReturn(true);
        $object = new Service($session);
        $request = $this->getMockForAbstractClass(\Psr\Http\Message\ServerRequestInterface::class);
        $object->login($request, null);
    }

    /**
     * @covers Caridea\Auth\Service::resume
     * @covers Caridea\Auth\Service::publishResume
     */
    public function testResume()
    {
        $session = $this->getMockBuilder('\\Caridea\\Session\\Session')
            ->setMethods(['resume', 'getValues'])
            ->getMockForAbstractClass();
        $session->expects($this->any())
            ->method('resume')
            ->willReturn(true);
        $session->expects($this->any())
            ->method('getValues')
            ->willReturnCallback(function ($namespace) use ($session) {
                return new \Caridea\Session\Values($session, $namespace);
            });
        
        $principal = Principal::get('foobar', []);
        $then = microtime(true) - 5;
        $_SESSION[Service::class] = [
            'principal' => $principal,
            'firstActive' => $then,
            'lastActive' => $then
        ];
        
        $object = new Service($session);
        
        $this->assertTrue($object->resume());
        $values = $session->getValues(Service::class);
        $this->assertNotEquals($then, $values->get('lastActive'));
        
        $this->verifyMockObjects();
    }

    /**
     * @covers Caridea\Auth\Service::resume
     * @covers Caridea\Auth\Service::publishResume
     */
    public function testResumePublish()
    {
        $session = $this->getMockBuilder('\\Caridea\\Session\\Session')
            ->setMethods(['resume', 'getValues'])
            ->getMockForAbstractClass();
        $session->expects($this->any())
            ->method('resume')
            ->willReturn(true);
        $session->expects($this->any())
            ->method('getValues')
            ->willReturnCallback(function ($namespace) use ($session) {
                return new \Caridea\Session\Values($session, $namespace);
            });
        
        $principal = Principal::get('foobar', []);
        $then = microtime(true) - 5;
        $_SESSION[Service::class] = [
            'principal' => $principal,
            'firstActive' => $then,
            'lastActive' => $then
        ];
        
        $publisher = $this->getMockBuilder(\Caridea\Event\Publisher::class)
            ->setMethods(['publish'])
            ->getMockForAbstractClass();
        $publisher->expects($this->once())
            ->method('publish');
        
        $object = new Service($session, $publisher);
        
        $this->assertTrue($object->resume());
        $values = $session->getValues(Service::class);
        $this->assertNotEquals($then, $values->get('lastActive'));
    }

    /**
     * @covers Caridea\Auth\Service::logout
     * @covers Caridea\Auth\Service::publishLogout
     */
    public function testLogout()
    {
        $session = $this->getMockBuilder('\\Caridea\\Session\\Session')
            ->setMethods(['resume', 'getValues', 'destroy'])
            ->getMockForAbstractClass();
        $session->expects($this->once())
            ->method('destroy')
            ->willReturn(true);
        $session->expects($this->any())
            ->method('resume')
            ->willReturn(true);
        $session->expects($this->any())
            ->method('getValues')
            ->willReturnCallback(function ($namespace) use ($session) {
                return new \Caridea\Session\Values($session, $namespace);
            });
        
        $principal = Principal::get('foobar', []);
        $then = microtime(true) - 5;
        $_SESSION[Service::class] = [
            'principal' => $principal,
            'firstActive' => $then,
            'lastActive' => $then
        ];
        
        $object = new Service($session);
        
        $this->assertEquals($principal, $object->getPrincipal());
        $this->assertTrue($object->logout());
        $this->assertEquals(Principal::getAnonymous(), $object->getPrincipal());
        
        $this->verifyMockObjects();
    }
    
    /**
     * @covers Caridea\Auth\Service::logout
     * @covers Caridea\Auth\Service::publishLogout
     */
    public function testLogoutNoPrincipal()
    {
        $session = $this->getMockBuilder('\\Caridea\\Session\\Session')
            ->setMethods(['resume', 'getValues'])
            ->getMockForAbstractClass();
        $session->expects($this->any())
            ->method('resume')
            ->willReturn(true);
        $session->expects($this->any())
            ->method('getValues')
            ->willReturnCallback(function ($namespace) use ($session) {
                return new \Caridea\Session\Values($session, $namespace);
            });
        
        $_SESSION[Service::class] = [];
        
        $object = new Service($session);
        
        $this->assertFalse($object->logout());
        
        $this->verifyMockObjects();
    }

    /**
     * @covers Caridea\Auth\Service::logout
     * @covers Caridea\Auth\Service::publishLogout
     */
    public function testLogoutPublish()
    {
        $session = $this->getMockBuilder('\\Caridea\\Session\\Session')
            ->setMethods(['resume', 'getValues', 'destroy'])
            ->getMockForAbstractClass();
        $session->expects($this->once())
            ->method('destroy')
            ->willReturn(true);
        $session->expects($this->any())
            ->method('resume')
            ->willReturn(true);
        $session->expects($this->any())
            ->method('getValues')
            ->willReturnCallback(function ($namespace) use ($session) {
                return new \Caridea\Session\Values($session, $namespace);
            });
        
        $principal = Principal::get('foobar', []);
        $then = microtime(true) - 5;
        $_SESSION[Service::class] = [
            'principal' => $principal,
            'firstActive' => $then,
            'lastActive' => $then
        ];
        
        $publisher = $this->getMockBuilder(\Caridea\Event\Publisher::class)
            ->setMethods(['publish'])
            ->getMockForAbstractClass();
        $publisher->expects($this->atLeastOnce())
            ->method('publish')
            ->with($this->isInstanceOf(Event::class));
        
        $object = new Service($session, $publisher);
        
        $this->assertTrue($object->logout());
        $this->assertEquals(Principal::getAnonymous(), $object->getPrincipal());
        
        $this->verifyMockObjects();
    }
}
