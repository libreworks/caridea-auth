<?php
/**
 * Caridea
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not
 * use this file except in compliance with the License. You may obtain a copy of
 * the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under
 * the License.
 *
 * @copyright 2015 LibreWorks contributors
 * @license   http://opensource.org/licenses/Apache-2.0 Apache 2.0 License
 */
namespace Caridea\Auth\Adapter;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2015-06-02 at 10:43:56.
 *
 * @requires extension mongo
 */
class MongoTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @covers Caridea\Auth\Adapter\AbstractAdapter
     * @covers Caridea\Auth\Adapter\Mongo::__construct
     * @covers Caridea\Auth\Adapter\Mongo::login
     * @covers Caridea\Auth\Adapter\Mongo::getResults
     * @covers Caridea\Auth\Adapter\Mongo::fetchResult
     */
    public function testLogin()
    {
        $password = 'correct horse battery staple';
        $hash = password_hash($password, PASSWORD_DEFAULT);
        
        $collection = $this->getMock(\MongoCollection::class, ['find'], [], '', false);
        $cursor = $this->getMock(\MongoCursor::class, ['getNext', 'count'], [], '', false);
        $collection->expects($this->any())
            ->method('find')
            ->willReturn($cursor);
        $cursor->expects($this->any())
            ->method('count')
            ->willReturn(1);
        $cursor->expects($this->any())
            ->method('getNext')
            ->willReturn(['_id' => 1234, 'user' => 'foobar', 'pass' => $hash]);
        
        $object = new Mongo($collection, 'user', 'pass', ['foo' => 'bar']);
        
        $request = $this->getMockBuilder(\Psr\Http\Message\ServerRequestInterface::class)
            ->setMethods(['getParsedBody'])
            ->getMockForAbstractClass();
        $request->expects($this->any())
            ->method('getParsedBody')
            ->willReturn(['username' => 'foobar', 'password' => $password]);
        
        $auth = $object->login($request);
        
        $this->assertInstanceOf(\Caridea\Auth\Principal::class, $auth);
        $this->assertEquals('foobar', $auth->getUsername());
        $this->assertEquals(1234, $auth->getDetails()['id']);
    }

    /**
     * @covers Caridea\Auth\Adapter\AbstractAdapter
     * @covers Caridea\Auth\Adapter\Mongo::__construct
     * @covers Caridea\Auth\Adapter\Mongo::login
     * @covers Caridea\Auth\Adapter\Mongo::getResults
     * @covers Caridea\Auth\Adapter\Mongo::fetchResult
     * @covers Caridea\Auth\Exception\InvalidPassword
     * @expectedException \Caridea\Auth\Exception\InvalidPassword
     */
    public function testLoginInvalid()
    {
        $password = 'correct horse battery staple';
        $hash = password_hash($password, PASSWORD_DEFAULT);
        
        $collection = $this->getMock(\MongoCollection::class, ['find'], [], '', false);
        $cursor = $this->getMock(\MongoCursor::class, ['getNext', 'count'], [], '', false);
        $collection->expects($this->any())
            ->method('find')
            ->willReturn($cursor);
        $cursor->expects($this->any())
            ->method('count')
            ->willReturn(1);
        $cursor->expects($this->any())
            ->method('getNext')
            ->willReturn(['_id' => 1234, 'user' => 'foobar', 'pass' => $hash]);
        
        $object = new Mongo($collection, 'user', 'pass', ['foo' => 'bar']);
        
        $request = $this->getMockBuilder(\Psr\Http\Message\ServerRequestInterface::class)
            ->setMethods(['getParsedBody'])
            ->getMockForAbstractClass();
        $request->expects($this->any())
            ->method('getParsedBody')
            ->willReturn(['username' => 'foobar', 'password' => 'wrong password']);
        
        $object->login($request);
    }

    /**
     * @covers Caridea\Auth\Adapter\AbstractAdapter
     * @covers Caridea\Auth\Adapter\Mongo::__construct
     * @covers Caridea\Auth\Adapter\Mongo::login
     * @covers Caridea\Auth\Adapter\Mongo::getResults
     * @covers Caridea\Auth\Adapter\Mongo::fetchResult
     * @covers Caridea\Auth\Exception\UsernameAmbiguous
     * @expectedException \Caridea\Auth\Exception\UsernameAmbiguous
     */
    public function testLoginMulti()
    {
        $collection = $this->getMock(\MongoCollection::class, ['find'], [], '', false);
        $cursor = $this->getMock(\MongoCursor::class, ['count'], [], '', false);
        $collection->expects($this->any())
            ->method('find')
            ->willReturn($cursor);
        $cursor->expects($this->any())
            ->method('count')
            ->willReturn(2);
        
        $object = new Mongo($collection, 'user', 'pass');
        
        $request = $this->getMockBuilder(\Psr\Http\Message\ServerRequestInterface::class)
            ->setMethods(['getParsedBody'])
            ->getMockForAbstractClass();
        $request->expects($this->any())
            ->method('getParsedBody')
            ->willReturn(['username' => 'foobar', 'password' => 'password']);
        
        $object->login($request);
    }

    /**
     * @covers Caridea\Auth\Adapter\AbstractAdapter
     * @covers Caridea\Auth\Adapter\Mongo::__construct
     * @covers Caridea\Auth\Adapter\Mongo::login
     * @covers Caridea\Auth\Adapter\Mongo::getResults
     * @covers Caridea\Auth\Adapter\Mongo::fetchResult
     * @covers Caridea\Auth\Exception\UsernameNotFound
     * @expectedException \Caridea\Auth\Exception\UsernameNotFound
     */
    public function testLoginNone()
    {
        $collection = $this->getMock(\MongoCollection::class, ['find'], [], '', false);
        $cursor = $this->getMock(\MongoCursor::class, ['count'], [], '', false);
        $collection->expects($this->any())
            ->method('find')
            ->willReturn($cursor);
        $cursor->expects($this->any())
            ->method('count')
            ->willReturn(0);
        
        $object = new Mongo($collection, 'user', 'pass');
        
        $request = $this->getMockBuilder(\Psr\Http\Message\ServerRequestInterface::class)
            ->setMethods(['getParsedBody'])
            ->getMockForAbstractClass();
        $request->expects($this->any())
            ->method('getParsedBody')
            ->willReturn(['username' => 'foobar', 'password' => null]);
        
        $object->login($request);
    }
    
    /**
     * @covers Caridea\Auth\Adapter\AbstractAdapter
     * @covers Caridea\Auth\Adapter\Mongo::__construct
     * @covers Caridea\Auth\Adapter\Mongo::login
     * @covers Caridea\Auth\Adapter\Mongo::getResults
     * @covers Caridea\Auth\Exception\ConnectionFailed
     * @expectedException \Caridea\Auth\Exception\ConnectionFailed
     * @expectedExceptionMessage Cannot read from source data
     */
    public function testLoginConnection()
    {
        $collection = $this->getMock(\MongoCollection::class, ['find'], [], '', false);
        $collection->expects($this->once())
            ->method('find')
            ->willThrowException(new \MongoConnectionException("Yup", 0));

        $object = new Mongo($collection, 'user', 'pass', []);
        
        $request = $this->getMockBuilder(\Psr\Http\Message\ServerRequestInterface::class)
            ->setMethods(['getParsedBody'])
            ->getMockForAbstractClass();
        $request->expects($this->any())
            ->method('getParsedBody')
            ->willReturn(['username' => 'foobar', 'password' => null]);
        
        $object->login($request);
    }
}
