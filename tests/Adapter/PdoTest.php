<?php
/**
 * Caridea
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not
 * use this file except in compliance with the License. You may obtain a copy of
 * the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under
 * the License.
 *
 * @copyright 2015 LibreWorks contributors
 * @license   http://opensource.org/licenses/Apache-2.0 Apache 2.0 License
 */
namespace Caridea\Auth\Adapter;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2015-06-02 at 11:59:47.
 *
 * @requires extension pdo
 */
class PdoTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @covers Caridea\Auth\Adapter\AbstractAdapter
     * @covers Caridea\Auth\Adapter\Pdo::__construct
     * @covers Caridea\Auth\Adapter\Pdo::login
     * @covers Caridea\Auth\Adapter\Pdo::execute
     * @covers Caridea\Auth\Adapter\Pdo::getSql
     * @covers Caridea\Auth\Adapter\Pdo::fetchResult
     */
    public function testLogin()
    {
        $password = 'correct horse battery staple';
        $hash = password_hash($password, PASSWORD_DEFAULT);
        
        $pdo = $this->getMock(MockPdo::class, ['prepare']);
        $stmt = $this->getMock(MockPdoStatement::class, ['execute', 'fetchAll']);
        $pdo->expects($this->any())
            ->method('prepare')
            ->with($this->equalTo("SELECT user, pass FROM mytable WHERE user = ? AND (foo = 'bar')"))
            ->willReturn($stmt);
        $stmt->expects($this->any())
            ->method('fetchAll')
            ->willReturn([['foobar', $hash]]);
        
        $object = new Pdo($pdo, 'user', 'pass', 'mytable', "foo = 'bar'");
        
        $request = $this->getMockBuilder(\Psr\Http\Message\ServerRequestInterface::class)
            ->setMethods(['getParsedBody'])
            ->getMockForAbstractClass();
        $request->expects($this->any())
            ->method('getParsedBody')
            ->willReturn(['username' => 'foobar', 'password' => $password]);
        
        $auth = $object->login($request);
        
        $this->assertInstanceOf(\Caridea\Auth\Principal::class, $auth);
        $this->assertEquals('foobar', $auth->getUsername());
        
        $this->verifyMockObjects();
    }

    /**
     * @covers Caridea\Auth\Adapter\AbstractAdapter
     * @covers Caridea\Auth\Adapter\Pdo::__construct
     * @covers Caridea\Auth\Adapter\Pdo::login
     * @covers Caridea\Auth\Adapter\Pdo::execute
     * @covers Caridea\Auth\Adapter\Pdo::fetchResult
     * @covers Caridea\Auth\Exception\InvalidPassword
     * @expectedException \Caridea\Auth\Exception\InvalidPassword
     */
    public function testLoginInvalid()
    {
        $password = 'correct horse battery staple';
        $hash = password_hash($password, PASSWORD_DEFAULT);
        
        $pdo = $this->getMock(MockPdo::class, ['prepare']);
        $stmt = $this->getMock(MockPdoStatement::class, ['execute', 'fetchAll']);
        $pdo->expects($this->any())
            ->method('prepare')
            ->with($this->equalTo("SELECT user, pass FROM mytable WHERE user = ? AND (foo = 'baz')"))
            ->willReturn($stmt);
        $stmt->expects($this->any())
            ->method('fetchAll')
            ->willReturn([['foobar', $hash]]);
        
        $object = new Pdo($pdo, 'user', 'pass', 'mytable', "foo = 'baz'");
        
        $request = $this->getMockBuilder(\Psr\Http\Message\ServerRequestInterface::class)
            ->setMethods(['getParsedBody'])
            ->getMockForAbstractClass();
        $request->expects($this->any())
            ->method('getParsedBody')
            ->willReturn(['username' => 'foobar', 'password' => 'wrong password']);
        
        $object->login($request);
    }

    /**
     * @covers Caridea\Auth\Adapter\AbstractAdapter
     * @covers Caridea\Auth\Adapter\Pdo::__construct
     * @covers Caridea\Auth\Adapter\Pdo::login
     * @covers Caridea\Auth\Adapter\Pdo::execute
     * @covers Caridea\Auth\Adapter\Pdo::fetchResult
     * @covers Caridea\Auth\Exception\UsernameAmbiguous
     * @expectedException \Caridea\Auth\Exception\UsernameAmbiguous
     */
    public function testLoginMulti()
    {
        $pdo = $this->getMock(MockPdo::class, ['prepare']);
        $stmt = $this->getMock(MockPdoStatement::class, ['execute', 'fetchAll']);
        $pdo->expects($this->any())
            ->method('prepare')
            ->with($this->equalTo("SELECT user, pass FROM mytable WHERE user = ?"))
            ->willReturn($stmt);
        $stmt->expects($this->any())
            ->method('fetchAll')
            ->willReturn([['foobar', ''], ['foobar', '']]);
        
        $object = new Pdo($pdo, 'user', 'pass', 'mytable');
        
        $request = $this->getMockBuilder(\Psr\Http\Message\ServerRequestInterface::class)
            ->setMethods(['getParsedBody'])
            ->getMockForAbstractClass();
        $request->expects($this->any())
            ->method('getParsedBody')
            ->willReturn(['username' => 'foobar', 'password' => 'password']);
        
        $object->login($request);
    }

    /**
     * @covers Caridea\Auth\Adapter\AbstractAdapter
     * @covers Caridea\Auth\Adapter\Pdo::__construct
     * @covers Caridea\Auth\Adapter\Pdo::login
     * @covers Caridea\Auth\Adapter\Pdo::execute
     * @covers Caridea\Auth\Adapter\Pdo::fetchResult
     * @covers Caridea\Auth\Exception\UsernameNotFound
     * @expectedException \Caridea\Auth\Exception\UsernameNotFound
     */
    public function testLoginNone()
    {
        $pdo = $this->getMock(MockPdo::class, ['prepare']);
        $stmt = $this->getMock(MockPdoStatement::class, ['execute', 'fetchAll']);
        $pdo->expects($this->any())
            ->method('prepare')
            ->willReturn($stmt);
        $stmt->expects($this->any())
            ->method('fetchAll')
            ->willReturn([]);
        
        $object = new Pdo($pdo, 'user', 'pass', 'mytable');
        
        $request = $this->getMockBuilder(\Psr\Http\Message\ServerRequestInterface::class)
            ->setMethods(['getParsedBody'])
            ->getMockForAbstractClass();
        $request->expects($this->any())
            ->method('getParsedBody')
            ->willReturn(['username' => 'foobar', 'password' => null]);
        
        $object->login($request);
    }
    
    /**
     * @covers Caridea\Auth\Adapter\AbstractAdapter
     * @covers Caridea\Auth\Adapter\Pdo::__construct
     * @covers Caridea\Auth\Adapter\Pdo::login
     * @covers Caridea\Auth\Adapter\Pdo::execute
     * @covers Caridea\Auth\Exception\ConnectionFailed
     * @expectedException \Caridea\Auth\Exception\ConnectionFailed
     * @expectedExceptionMessage Cannot read from source data
     */
    public function testLoginConnection()
    {
        $pdo = $this->getMock(MockPdo::class, ['prepare']);
        $pdo->expects($this->once())
            ->method('prepare')
            ->willThrowException(new \PDOException("Yup", 0));

        $object = new Pdo($pdo, 'user', 'pass', 'mytable');
        
        $request = $this->getMockBuilder(\Psr\Http\Message\ServerRequestInterface::class)
            ->setMethods(['getParsedBody'])
            ->getMockForAbstractClass();
        $request->expects($this->any())
            ->method('getParsedBody')
            ->willReturn(['username' => 'foobar', 'password' => null]);
        
        $object->login($request);
    }
}

class MockPdo extends \PDO
{
    public function __construct()
    {
    }
}

class MockPdoStatement extends \PDOStatement
{
    public function __construct()
    {
    }
}
