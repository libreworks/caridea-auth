<?php
/**
 * Caridea
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not
 * use this file except in compliance with the License. You may obtain a copy of
 * the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under
 * the License.
 *
 * @copyright 2015 LibreWorks contributors
 * @license   http://opensource.org/licenses/Apache-2.0 Apache 2.0 License
 */
namespace Caridea\Auth;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2015-06-01 at 17:40:34.
 */
class TimeoutListenerTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @covers Caridea\Auth\TimeoutListener::__construct
     * @covers Caridea\Auth\TimeoutListener::notify
     */
    public function testTimeout()
    {
        $source = $this->getMockBuilder(Service::class)
            ->disableOriginalConstructor()
            ->getMock();
        $source->expects($this->once())
            ->method('logout');
        
        $principal = Principal::getAnonymous();
        
        $object = new TimeoutListener(-1, 86400);
        $now = time();
        $object->notify(new Event\Resume($source, $principal, $now - 1, $now));
        $object->notify(new Event\Resume($source, $principal, $now - 1, $now + 3));
    
        $this->verifyMockObjects();
    }

    /**
     * @covers Caridea\Auth\TimeoutListener::__construct
     * @covers Caridea\Auth\TimeoutListener::notify
     */
    public function testExpire()
    {
        $source = $this->getMockBuilder(Service::class)
            ->disableOriginalConstructor()
            ->getMock();
        $source->expects($this->once())
            ->method('logout');
        
        $principal = Principal::getAnonymous();
        
        $object = new TimeoutListener(86400, 3);
        $now = time();
        $object->notify(new Event\Resume($source, $principal, $now - 2, $now));
        $object->notify(new Event\Resume($source, $principal, $now - 3, $now + 1));
    
        $this->verifyMockObjects();
    }

    /**
     * @covers Caridea\Auth\Event\Resume
     * @covers Caridea\Auth\TimeoutListener::__construct
     * @covers Caridea\Auth\TimeoutListener::notify
     */
    public function testNeither()
    {
        $source = $this->getMockBuilder(Service::class)
            ->disableOriginalConstructor()
            ->getMock();
        $source->expects($this->never())
            ->method('logout');
        
        $principal = Principal::getAnonymous();
        
        $object = new TimeoutListener(5, 5);
        $now = time();
        $object->notify(new Event\Resume($source, $principal, $now - 2, $now));
    
        $this->verifyMockObjects();
    }
}
