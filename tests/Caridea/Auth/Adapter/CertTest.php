<?php
/**
 * Caridea
 * 
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not
 * use this file except in compliance with the License. You may obtain a copy of
 * the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under
 * the License.
 * 
 * @copyright 2015 LibreWorks contributors
 * @license   http://opensource.org/licenses/Apache-2.0 Apache 2.0 License
 */
namespace Caridea\Auth\Adapter;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2015-06-01 at 17:50:19.
 */
class CertTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @covers Caridea\Auth\Adapter\AbstractAdapter
     * @covers Caridea\Auth\Adapter\Cert::__construct
     * @covers Caridea\Auth\Adapter\Cert::login
     * @expectedException \InvalidArgumentException
     * @expectedExceptionMessage The "name" argument is required; it cannot be null, empty, nor containing only whitespace
     */    
    public function testLoginBlank()
    {
        new Cert('  ');
    }
    
    /**
     * @covers Caridea\Auth\Adapter\AbstractAdapter
     * @covers Caridea\Auth\Adapter\Cert::__construct
     * @covers Caridea\Auth\Adapter\Cert::login
     */    
    public function testLogin()
    {
        $server = [
            'SSL_CLIENT_S_DN' => '/O=Acme, Inc./CN=Bob',
            'HTTP_USER_AGENT' => 'Mozilla/5.0',
            'REMOTE_ADDR' => '192.168.1.1'
        ];
        $request = $this->getMockBuilder(\Psr\Http\Message\ServerRequestInterface::class)
            ->setMethods(['getServerParams'])
            ->getMockForAbstractClass();
        $request->expects($this->any())
            ->method('getServerParams')
            ->willReturn($server);
        
        $object = new Cert();
        $principal = $object->login($request);
        
        $this->assertInstanceOf(\Caridea\Auth\Principal::class, $principal);
        $this->assertEquals('/O=Acme, Inc./CN=Bob', $principal->getUsername());
        $this->assertEquals('/O=Acme, Inc./CN=Bob', $principal->getDetails()['dn']);
        $this->assertEquals($server['HTTP_USER_AGENT'], $principal->getDetails()['ua']);
        $this->assertEquals($server['REMOTE_ADDR'], $principal->getDetails()['ip']);        
    }
    
    /**
     * @covers Caridea\Auth\Adapter\AbstractAdapter
     * @covers Caridea\Auth\Exception\MissingCredentials
     * @covers Caridea\Auth\Adapter\Cert::__construct
     * @covers Caridea\Auth\Adapter\Cert::login
     * @expectedException \Caridea\Auth\Exception\MissingCredentials
     */
    public function testLoginMissing()
    {
        $server = [
        ];
        $request = $this->getMockBuilder(\Psr\Http\Message\ServerRequestInterface::class)
            ->setMethods(['getServerParams'])
            ->getMockForAbstractClass();
        $request->expects($this->any())
            ->method('getServerParams')
            ->willReturn($server);
        
        $object = new Cert();
        $object->login($request);
    }
    
    /**
     * @covers Caridea\Auth\Adapter\AbstractAdapter
     * @covers Caridea\Auth\Adapter\Cert::__construct
     * @covers Caridea\Auth\Adapter\Cert::login
     */
    public function testLoginRegex()
    {
        $server = [
            'SSL_CLIENT_S_DN' => '/O=Acme, Inc./CN=Bob',
            'HTTP_USER_AGENT' => 'Mozilla/5.0',
            'REMOTE_ADDR' => '192.168.1.1'
        ];
        $request = $this->getMockBuilder(\Psr\Http\Message\ServerRequestInterface::class)
            ->setMethods(['getServerParams'])
            ->getMockForAbstractClass();
        $request->expects($this->any())
            ->method('getServerParams')
            ->willReturn($server);
        
        $object = new Cert('SSL_CLIENT_S_DN', '#/CN=(.+)$#');
        $principal = $object->login($request);
        
        $this->assertInstanceOf(\Caridea\Auth\Principal::class, $principal);
        $this->assertEquals('Bob', $principal->getUsername());
        $this->assertEquals('/O=Acme, Inc./CN=Bob', $principal->getDetails()['dn']);
        $this->assertEquals($server['HTTP_USER_AGENT'], $principal->getDetails()['ua']);
        $this->assertEquals($server['REMOTE_ADDR'], $principal->getDetails()['ip']);
    }
    
    /**
     * @covers Caridea\Auth\Exception\MissingCredentials
     * @covers Caridea\Auth\Adapter\AbstractAdapter
     * @covers Caridea\Auth\Adapter\Cert::__construct
     * @covers Caridea\Auth\Adapter\Cert::login
     * @expectedException \Caridea\Auth\Exception\MissingCredentials
     */
    public function testLoginRegexFail()
    {
        $server = [
            'SSL_CLIENT_S_DN' => '/O=Acme, Inc./CN=Bob',
            'HTTP_USER_AGENT' => 'Mozilla/5.0',
            'REMOTE_ADDR' => '192.168.1.1'
        ];
        $request = $this->getMockBuilder(\Psr\Http\Message\ServerRequestInterface::class)
            ->setMethods(['getServerParams'])
            ->getMockForAbstractClass();
        $request->expects($this->any())
            ->method('getServerParams')
            ->willReturn($server);
        
        $object = new Cert('SSL_CLIENT_S_DN', '#/OU=(.+)$#');
        $object->login($request);
    }    
}
